services:
  postgres:
    image: postgres:15
    container_name: abacws-postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=abacws
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data

  mongo:
    image: mongo
    container_name: abacws-mongo
    restart: always
    volumes:
      - mongo-data:/data/db

  api:
    build:
      context: api
      dockerfile: Dockerfile
    container_name: abacws-api
    hostname: apihost
    environment:
      - API_PORT=5000
      # Choose ONE (time-series / mappings require Postgres):
      # - DB_ENGINE=mongo
      - DB_ENGINE=postgres
      # - DB_ENGINE=disabled
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - PGDATABASE=abacws
      - API_KEY=V3rySecur3Pas3word
    restart: always
    depends_on:
      - mongo
      - postgres
    ports:
      - "5000:5000"
    volumes:
      - ./api/src/api/data:/api/src/api/data
    healthcheck:
      test: ["CMD", "sh", "-lc", "wget -qO- http://localhost:5000/health | grep -q 'ok'"]
      interval: 30s
      timeout: 5s
      retries: 5

  visualiser:
    build:
      context: visualiser
      dockerfile: Dockerfile
    container_name: abacws-visualiser
    hostname: visualiserhost
    restart: always
    depends_on:
      - api
    ports:
      - "8090:80"
    environment:
      - WEB_PORT=80
      - API_HOST=api:5000
      # Optional: set to '1' to enable verbose 3D loader logging in browser console
      # - ABACWS_DEBUG=1
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.abacws-visualiser.loadbalancer.server.port=80"
      - "traefik.http.routers.abacws-visualiser.rule=Host(`visualiser.abacws.example.com`)"
      - "traefik.http.routers.abacws-visualiser.entrypoints=https"
      - "traefik.http.routers.abacws-visualiser.tls=true"
    healthcheck:
      test: ["CMD", "sh", "-lc", "wget -qO- http://localhost/health | grep -q 'ok'"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mongo-data:
  pg-data: